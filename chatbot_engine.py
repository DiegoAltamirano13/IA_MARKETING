import requests
import re
import logging
import random
from autocorrect import Speller
from config import OPENROUTER_API_URL, OPENROUTER_API_KEY, OPENROUTER_APP_NAME, OPENROUTER_APP_URL, CONTEXTO_GENERAL, EMPRESA_INFO
from database import DatabaseManager, SecurityError

# ‚úÖ Importar los nuevos m√≥dulos
from modules.ubicaciones_module import UbicacionesModule
from utils.context_manager import ContextManager

logger = logging.getLogger(__name__)

class MotorRespuestasAvanzado:
    def __init__(self):
        logger.info("Inicializando motor con DeepSeek a trav√©s de OpenRouter")
        self.historial_conversacion = []
        self.db_manager = DatabaseManager()
        
        self.palabras_personalizadas = set()
            
        # ‚úÖ Inicializar palabras personalizadas
        self.palabras_personalizadas = {
            'argo', 'almacenadora', 'almac√©n', 'almacen', 'log√≠stica',
            'bajio', 'baj√≠o', 'c√≥rdoba', 'golfo', 'noreste', 'occidente',
            'peninsula', 'puebla', 'quer√©taro', 'yucat√°n', 'jalisco',
            'mercancia', 'mercanc√≠a', 'producto', 'cliente', 'pedido',
            'factura', 'servicio', 'almacenamiento', 'distribuci√≥n'
        }

        # ‚úÖ Inicializar el gestor de contexto
        self.context_manager = ContextManager()
        
        # ‚úÖ Inicializar m√≥dulos
        self.modulos = [
            UbicacionesModule(self.db_manager, self.context_manager)
            # Aqu√≠ agregar√°s m√°s m√≥dulos despu√©s: ServiciosModule, InventarioModule, etc.
        ]
        
        #self._agregar_palabras_personalizadas()

    def _debe_preservar(self, palabra):
        """Determina si una palabra debe preservarse sin cambios"""
        palabra_lower = palabra.lower()
        
        # 1. Preservar palabras del dominio empresarial
        if palabra_lower in self.palabras_personalizadas:
            return True
            
        # 2. Preservar nombres propios (inician con may√∫scula)
        if len(palabra) > 1 and palabra[0].isupper():
            return True
            
        # 3. Preservar siglas y acr√≥nimos (todas may√∫sculas)
        if palabra.isupper() and len(palabra) <= 6:
            return True
            
        # 4. Preservar palabras muy cortas
        if len(palabra) <= 2:
            return True
            
        # 5. Preservar n√∫meros y combinaciones alfanum√©ricas
        if any(char.isdigit() for char in palabra):
            return True
            
        # 6. Preservar emails
        if '@' in palabra and '.' in palabra:
            return True
            
        # 7. Preservar c√≥digos y referencias (patrones comunes)
        if re.match(r'^[A-Z0-9\-_]+$', palabra) and len(palabra) >= 3:
            return True
            
        return False
    
    def _es_correccion_valida(self, original, correccion):
        """Determina si una correcci√≥n es v√°lida"""
        # No cambiar si la correcci√≥n es muy diferente en longitud
        if abs(len(original) - len(correccion)) > 2:
            return False
            
        # No cambiar si son esencialmente iguales
        if original.lower() == correccion.lower():
            return False
            
        # No cambiar si solo difiere en acentos o may√∫sculas
        if original.lower() == correccion.lower().replace('√°', 'a').replace('√©', 'e').replace('√≠', 'i').replace('√≥', 'o').replace('√∫', 'u'):
            return False
            
        return True

    def _distancia_levenshtein(self, s1, s2):
        """Calcula distancia Levenshtein entre dos palabras"""
        if len(s1) < len(s2):
            return self._distancia_levenshtein(s2, s1)
        if len(s2) == 0:
            return len(s1)
        
        previous_row = range(len(s2) + 1)
        for i, c1 in enumerate(s1):
            current_row = [i + 1]
            for j, c2 in enumerate(s2):
                insertions = previous_row[j + 1] + 1
                deletions = current_row[j] + 1
                substitutions = previous_row[j] + (c1 != c2)
                current_row.append(min(insertions, deletions, substitutions))
            previous_row = current_row
        
        return previous_row[-1]
    
    def corregir_ortografia(self, texto):
        """Usa autocorrect con reglas personalizadas"""
        try:
            spell = Speller(lang='es')
            palabras = texto.split()
            corregidas = []
            
            for palabra in palabras:
                if self._debe_preservar(palabra):
                    corregidas.append(palabra)
                else:
                    # Solo corregir si la palabra no existe en espa√±ol
                    correccion = spell(palabra)
                    # Si la correcci√≥n es muy diferente, preservar original
                    if self._es_correccion_valida(palabra, correccion):
                        corregidas.append(correccion)
                    else:
                        corregidas.append(palabra)
                        
            return ' '.join(corregidas)
            
        except Exception as e:
            logger.error(f"Error con autocorrect: {str(e)}")
            return texto

    def _es_correccion_valida(self, original, correccion):
        """Determina si una correcci√≥n es v√°lida"""
        # No cambiar si la correcci√≥n es muy diferente
        if abs(len(original) - len(correccion)) > 2:
            return False
            
        # No cambiar si solo difiere en una letra (posible nombre propio)
        if len(original) > 3 and self._distancia_levenshtein(original, correccion) <= 1:
            return False
            
        return True

    def _distancia_levenshtein(self, s1, s2):
        """Calcula distancia Levenshtein entre dos palabras"""
        if len(s1) < len(s2):
            return self._distancia_levenshtein(s2, s1)
        if len(s2) == 0:
            return len(s1)
        
        previous_row = range(len(s2) + 1)
        for i, c1 in enumerate(s1):
            current_row = [i + 1]
            for j, c2 in enumerate(s2):
                insertions = previous_row[j + 1] + 1
                deletions = current_row[j] + 1
                substitutions = previous_row[j] + (c1 != c2)
                current_row.append(min(insertions, deletions, substitutions))
            previous_row = current_row
        
        return previous_row[-1]

    def es_saludo(self, mensaje):
        """Detecta si el mensaje es un saludo"""
        saludos = ['hola', 'buenos d√≠as', 'buenas tardes', 'buenas noches', 'saludos', 'hi', 'hello']
        return any(saludo in mensaje.lower() for saludo in saludos)

    def es_despedida(self, mensaje):
        """Detecta si el mensaje es una despedida"""
        despedidas = ['adi√≥s', 'adios', 'hasta luego', 'nos vemos', 'gracias', 'bye', 'goodbye']
        return any(despedida in mensaje.lower() for despedida in despedidas)

    def procesar_saludo(self, mensaje):
        """Procesa mensajes de saludo"""
        saludos = [
            "¬°Hola! üëã ¬øEn qu√© puedo ayudarte hoy?",
            "¬°Buen d√≠a! üåü Estoy aqu√≠ para asistirte",
            "¬°Hola! üòä ¬øC√≥mo puedo ayudarte?"
        ]
        return random.choice(saludos)

    def procesar_despedida(self, mensaje):
        """Procesa mensajes de despedida"""
        despedidas = [
            "¬°Hasta luego! üëã Fue un placer ayudarte",
            "¬°Que tengas un excelente d√≠a! üåü",
            "¬°Nos vemos! üòä Estoy aqu√≠ cuando me necesites"
        ]
        return random.choice(despedidas)

    def es_consulta_bd(self, mensaje):
        """
        SOLO para logging o an√°lisis, NO para decidir procesamiento
        Siempre retorna False para evitar consultas directas a BD
        """
        mensaje_lower = mensaje.lower()
        
        palabras_bd = [
            'productos', 'stock', 'inventario', 'existencias', 'precio', 'costos',
            'clientes', 'pedidos', 'ventas', 'facturas', 'cotizaciones'
        ]
        
        es_consulta = any(palabra in mensaje_lower for palabra in palabras_bd)
        if es_consulta:
            logger.info(f"Consulta de BD detectada pero no procesada: {mensaje}")
        
        return False

    def procesar_consulta_bd(self, mensaje):
        """
        M√©todo deshabilitado - las consultas BD solo las manejan los m√≥dulos
        """
        logger.warning(f"Intento de consulta BD directa bloqueada: {mensaje}")
        return "Las consultas directas a base de datos est√°n restringidas. Por favor, formula tu pregunta de manera m√°s espec√≠fica."

    def responder_pregunta_empresa(self, mensaje):
        """
        Responde preguntas sobre la empresa SIN consultar BD
        """
        mensaje_lower = mensaje.lower()
        
        # Preguntas frecuentes sobre la empresa (respuestas predefinidas)
        if any(palabra in mensaje_lower for palabra in ['qu√© es', 'que es', 'quienes son', 'qui√©n es']):
            return EMPRESA_INFO
        
        if 'servicios' in mensaje_lower:
            return "Ofrecemos servicios de almacenamiento, log√≠stica, distribuci√≥n y custodia de mercanc√≠as."
        
        if 'ubicaciones' in mensaje_lower or 'd√≥nde' in mensaje_lower:
            return "Tenemos presencia en m√∫ltiples plazas. ¬øTe gustar√≠a conocer nuestras ubicaciones espec√≠ficas?"
        
        if 'contacto' in mensaje_lower or 'tel√©fono' in mensaje_lower or 'email' in mensaje_lower:
            return "Puedes contactarnos al tel√©fono: 555-123-4567 o email: contacto@argo.com.mx"
        
        if 'horario' in mensaje_lower:
            return "Nuestro horario de atenci√≥n es de lunes a viernes de 9:00 AM a 6:00 PM."
        
        return None

    def usar_deepseek_openrouter(self, mensaje_usuario):
        """
        Usa DeepSeek a trav√©s de OpenRouter con detecci√≥n inteligente de intenciones
        """
        try:
            # Corregir ortograf√≠a del mensaje
            mensaje_corregido = self.corregir_ortografia(mensaje_usuario)
            
            prompt = f"""
            Eres ALMAssist, asistente especializado de ARGO Almacenadora. 

            CONTEXTO DE LA EMPRESA:
            {EMPRESA_INFO}

            INSTRUCCIONES ESPECIALES:
            1. ANALIZA si la pregunta est√° relacionada con UBICACIONES, SUCURSALES o ALMACENES
            2. Si detectas que pregunta por ubicaciones, responde SOLO con: "UBICACIONES: [tipo_consulta]|[ubicacion_extraida]"
            3. Para otras consultas, responde normalmente

            TIPOS DE CONSULTA DE UBICACIONES:
            - "GENERAL": Si pregunta por todas las ubicaciones, ej: "¬øD√≥nde tienen almacenes?" ‚Üí "UBICACIONES: GENERAL|"
            - "ESPECIFICA": Si menciona una ubicaci√≥n concreta, ej: "almacenes en Quer√©taro" ‚Üí "UBICACIONES: ESPECIFICA|Quer√©taro"  
            - "DETALLES": Si pide detalles espec√≠ficos como direcciones, tel√©fonos, horarios ‚Üí "UBICACIONES: DETALLES|"
            - "REFERENCIA": Si usa n√∫meros como "1", "2", "primera", "segunda" ‚Üí "UBICACIONES: REFERENCIA|1"

            FORMATO DE RESPUESTA PARA UBICACIONES:
            Si es sobre ubicaciones, responde EXACTAMENTE: "UBICACIONES: [GENERAL|ESPECIFICA|DETALLES|REFERENCIA]|[ubicacion_o_referencia]"

            EJEMPLOS COMPLETOS:
            - "¬øD√≥nde est√°n sus almacenes?" ‚Üí "UBICACIONES: GENERAL|"
            - "Tienen sucursal en Guadalajara?" ‚Üí "UBICACIONES: ESPECIFICA|Guadalajara"  
            - "Direcci√≥n y tel√©fono de Monterrey" ‚Üí "UBICACIONES: DETALLES|Monterrey"
            - "Quiero la primera ubicaci√≥n" ‚Üí "UBICACIONES: REFERENCIA|primera"
            - "Mu√©strame la n√∫mero 2" ‚Üí "UBICACIONES: REFERENCIA|2"
            - "Informaci√≥n de la 3" ‚Üí "UBICACIONES: REFERENCIA|3"
            - "La ubicaci√≥n 5" ‚Üí "UBICACIONES: REFERENCIA|5"
            - "Quiero saber sobre servicios" ‚Üí (respuesta normal)

            UBICACIONES DISPONIBLES (para referencia):
            üìç BAJIO, üìç C√ìRDOBA, üìç GOLFO, üìç M√âXICO, üìç NORESTE, üìç OCCIDENTE, üìç PENINSULA, üìç PUEBLA

            Pregunta del usuario: "{mensaje_corregido}"

            Responde:
            """

            headers = {
                'Authorization': f'Bearer {OPENROUTER_API_KEY}',
                'Content-Type': 'application/json',
                'HTTP-Referer': OPENROUTER_APP_URL,
                'X-Title': OPENROUTER_APP_NAME
            }
            
            payload = {
                'model': 'deepseek/deepseek-chat-v3.1:free',
                'messages': [{'role': 'user', 'content': prompt}],
                'temperature': 0.1,
                'max_tokens': 100
            }
            
            response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, timeout=20)
            response.raise_for_status()
            
            resultado = response.json()
            respuesta = resultado['choices'][0]['message']['content'].strip()
            
            # Verificar si DeepSeek detect√≥ que es sobre ubicaciones
            if respuesta.startswith("UBICACIONES:"):
                partes = respuesta.split("|")
                tipo_consulta = partes[0].split(":")[1].strip()
                ubicacion_extraida = partes[1].strip() if len(partes) > 1 else None
                
                logger.info(f"DeepSeek detect√≥: tipo={tipo_consulta}, ubicaci√≥n={ubicacion_extraida}")
                
                # Redirigir al m√≥dulo de ubicaciones con toda la informaci√≥n
                from modules.ubicaciones_module import UbicacionesModule
                ubicaciones_module = UbicacionesModule(self.db_manager, self.context_manager)
                
                # Pasar tanto el tipo como la ubicaci√≥n extra√≠da
                respuesta_real = ubicaciones_module.procesar_con_tipo(
                    mensaje_corregido, 
                    tipo_consulta, 
                    user_id="default",
                    ubicacion_extraida=ubicacion_extraida  # ‚Üê Nuevo par√°metro
                )
                return respuesta_real
            
            # Si no es sobre ubicaciones, retornar la respuesta normal de DeepSeek
            return respuesta
                
        except requests.exceptions.Timeout:
            logger.error("Timeout al conectar con OpenRouter")
            return "Lo siento, el servicio de inteligencia artificial est√° tardando en responder. Por favor, intenta nuevamente."
        except requests.exceptions.RequestException as e:
            logger.error(f"Error de conexi√≥n con OpenRouter: {str(e)}")
            return "Lo siento, hay problemas de conexi√≥n con el servicio de inteligencia artificial."
        except Exception as e:
            logger.error(f"Error inesperado al usar DeepSeek: {str(e)}")
            return "Lo siento, ocurri√≥ un error inesperado al procesar tu solicitud."
        
    def procesar_mensaje(self, mensaje_usuario, user_id="default"):
        """Procesa el mensaje con el sistema modular"""
        logger.info(f"Procesando: {mensaje_usuario}")
        
        # ‚úÖ PRIMERO: Verificar si es un saludo o despedida
        if self.es_saludo(mensaje_usuario):
            return self.procesar_saludo(mensaje_usuario)
        if self.es_despedida(mensaje_usuario):
            return self.procesar_despedida(mensaje_usuario)
        
        # ‚úÖ SEGUNDO: Usar DeepSeek para clasificaci√≥n inteligente
        respuesta_deepseek = self.usar_deepseek_openrouter(mensaje_usuario)
        
        # Si DeepSeek ya proces√≥ la solicitud (ya sea ubicaciones o respuesta normal), retornarla
        if respuesta_deepseek and not respuesta_deepseek.startswith("UBICACIONES:"):
            return respuesta_deepseek
        
        # ‚úÖ TERCERO: Intentar con los m√≥dulos especializados (para casos donde DeepSeek no detect√≥ pero deber√≠a)
        for modulo in self.modulos:
            if modulo.puede_manejar(mensaje_usuario):
                logger.info(f"M√≥dulo {modulo.__class__.__name__} maneja el mensaje")
                return modulo.procesar(mensaje_usuario, user_id)
        
        # ‚úÖ CUARTO: Verificar si es una pregunta sobre la empresa (sin BD)
        respuesta_empresa = self.responder_pregunta_empresa(mensaje_usuario)
        if respuesta_empresa:
            return respuesta_empresa
        
        # Respuesta de emergencia
        return "Lo siento, no pude procesar tu solicitud. ¬øPodr√≠as reformular tu pregunta?"